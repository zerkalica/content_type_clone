<?php

function content_type_clone_menu_alter(&$items) {
  $item = &$items['admin/structure/types'];
  $item['page callback'] = 'content_type_clone_overview_types';
}

/**
 * Displays the content type admin overview page.
 */
function _content_type_clone_overview_types() {
  $types = node_type_get_types();
  $names = node_type_get_names();
  $field_ui = module_exists('field_ui');
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => $field_ui ? '4' : '2'));
  $meta = $rows = array();

  foreach ($names as $key => $name) {
    $type = $types[$key];
    if (node_hook($type->type, 'form')) {
      $type_url_str = str_replace('_', '-', $type->type);
      $row = array(theme('node_admin_overview', array('name' => $name, 'type' => $type)));
      // Set the edit column.
      $row[] = array('data' => l(t('edit'), 'admin/structure/types/manage/' . $type_url_str));

      if ($field_ui) {
        // Manage fields.
        $row[] = array('data' => l(t('manage fields'), 'admin/structure/types/manage/' . $type_url_str . '/fields'));

        // Display fields.
        $row[] = array('data' => l(t('manage display'), 'admin/structure/types/manage/' . $type_url_str . '/display'));
      }

      // Set the delete column.
      if ($type->custom) {
        $row[] = array('data' => l(t('delete'), 'admin/structure/types/manage/' . $type_url_str . '/delete'));
      }
      else {
        $row[] = array('data' => '');
      }

      $meta[] = array('type_url_str' => $type_url_str, 'type' => $type, 'name' => $name);
      $rows[] = $row;
    }
  }

  $build['node_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#meta' => $meta,
    '#empty' => t('No content types available. <a href="@link">Add content type</a>.', array('@link' => url('admin/structure/types/add'))),
  );

  return $build;
}

function content_type_clone_overview_types() {
  $types = _content_type_clone_overview_types();
  $meta  = $types['node_table']['#meta'];
  foreach($types['node_table']['#rows'] as $key => & $row) {
    $info = $meta[$key];
    $row[] = array('data' => l(t('clone'), 'admin/structure/types/manage/' . $info['type_url_str'] . '/clone'));
    $row[] = array('data' => l(t('sync fields'), 'admin/structure/types/manage/' . $info['type_url_str'] . '/sync-fields'));
  }

  return $types;
}

function content_type_clone_menu() {

  $items = array();
  $items['admin/structure/types/manage/%node_type/clone'] = array(
    'title' => 'Clone',
    'page arguments' => array('content_type_clone_node_type_form', 4),
    'access arguments' => array('administer content types'),
  );
  $items['admin/structure/types/manage/%node_type/sync-fields'] = array(
    'title' => 'Sync fields',
    'page arguments' => array('content_type_clone_sync_fields_form', 4),
    'access arguments' => array('administer content types'),
  );

  return $items;
}

/**
 * Menu callback; clone a single content type.
 */
function content_type_clone_node_type_form($form, &$form_state, $type) {
  $form = node_type_form($form, $form_state, $type);

  $form['#entity'] = 'node';
  $form['#bundle'] = $form['#node_type'];

  $form['description_copy'] = $form['description'];
  $message = t('Clone');
  $caption = '';

  $form['#validate'] = array();
  $form['#submit'] = array();

  $form_id = 'node_type_form';
  $hooks = array('form', 'form_' . $form_id);
  drupal_alter($hooks, $form, $form_state, $form_id);

  $form['#validate'][] = 'content_type_clone_node_type_form_validate';
  $form['#submit'] = array('content_type_clone_node_type_form_submit');

  return confirm_form($form, $message, 'admin/structure/types', $caption, t('Clone'));
}

/**
 * Form validation handler for node_type_form().
 *
 * @see node_type_form_submit()
 */
function content_type_clone_node_type_form_validate($form, &$form_state) {
  $old_type = $form['#bundle'];
  if($form_state['values']['type'] == $old_type->type) {
    form_set_error('type', t('Invalid machine-readable name. Enter a name other than %invalid.', array('%invalid' => $form_state['values']['type'],)));
  }

  if($form_state['values']['name'] == $old_type->name) {
    form_set_error('name', t('The human-readable name %name is already taken.', array('%name' => $form_state['values']['name'],)));
  }

  return node_type_form_validate($form, $form_state);
}

function _content_type_clone_get_filter_form_values() {
  return array('form_token', 'op', 'submit', 'delete','reset', 'form_id', 'form_build_id', 'type', 'name', 'description');
}

function content_type_clone_node_type_form_submit($form, &$form_state) {
  $old_type_name = $form_state['values']['old_type'];
  $old_type = $form['#bundle'];
  $type = clone $old_type;

  //$type->old_type = $old_type_name;
  //$type->orig_type = trim($form_state['values']['orig_type']);
  //$type->old_type = trim($form_state['values']['orig_type']);
  $type->description = $form_state['values']['description_copy'];

  $type->orig_type = $type->old_type = '';
  $type->type = trim($form_state['values']['type']);
  $type->name = trim($form_state['values']['name']);
  $type->help = $form_state['values']['help'];
  $type->title_label = $form_state['values']['title_label'];


  $variables = array();
  $filter_values = _content_type_clone_get_filter_form_values();
  foreach($form_state['values'] as $key => $value) {
    if(!isset($type->$key) && !in_array($key, $filter_values)) {
       $variables[$key] = $value;
    }
  }

  // Save or reset persistent variable values.
  foreach ($variables as $key => $value) {
    $variable_new = $key . '_' . $type->type;

    if (is_array($value)) {
      $value = array_keys(array_filter($value));
    }
    variable_set($variable_new, $value);
  }

  // Saving the content type after saving the variables allows modules to act
  // on those variables via hook_node_type_insert().

  $status = node_type_save($type);
  node_types_rebuild();
  menu_rebuild();
  _content_type_clone_create_instances($old_type, $type, $form['#entity']);
  _content_type_clone_copy_settings($old_type, $type);


  $type_url_str = str_replace('_', '-', $type->type);
  $form_state['redirect'] = 'admin/structure/types/manage/' . $type_url_str . '/fields';
  return;
}


function content_type_clone_sync_fields_form($form, &$form_state, $type) {
  $entity_type = $form['#entity'] = 'node';
  $form['#bundle'] = $type;

  $src_instances = field_read_instances(array('entity_type' => $entity_type, 'bundle' => $type->type));
  $defaults = $options = array();
  foreach($src_instances as $instance) {
    $name = $instance['field_name'];
    $options[$name] = $instance['label'];
    $defaults[] = $name;
  }

  $form['source'] = array(
    '#type' => 'fieldset',
    '#title' => t('Source'),
    '#collapsible' => true,
  );

  $form['source']['field_names'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Fields'),
    '#description' => t('Check fields which settings you want to copy to all other node types'),
    '#options' => $options,
    '#default_value' => $defaults,
  );

  $form['source']['copy_variables'] = array(
    '#type' => 'checkbox',
    '#title' => t('Module variables'),
    '#description' => t('Check to copy node type variables, provided by modules'),
    '#default_value' => true,
  );
  $form['source']['node_permissions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Node permissions'),
    '#description' => t('Check to copy node permissions'),
    '#default_value' => true,
  );

  if(module_exists('content_type_groups')) {
    $form['source']['group_settings'] = array(
      '#type' => 'checkbox',
      '#title' => t('Group settings'),
      '#description' => t('Check to copy node group settings'),
      '#default_value' => true,
    );
  }

  $form['dest'] = array(
    '#type' => 'fieldset',
    '#title' => t('Destination'),
    '#collapsible' => true,
    '#collapsed' => true,
  );

  $options = array();
  foreach(node_type_get_types() as $type) {
    $options[$type->type] = $type->name;
  }

  $form['dest']['bundles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Nodes'),
    '#description' => t('Check types, which settings you want overwrite. If all unchecked: bundles with same fields will be affected'),
    '#options' => $options,
  );

  $caption = t('Copy settings of selected fields to all node types');
  $message = t('Copy fields settings');

  return confirm_form($form, $message, 'admin/structure/types', $caption, t('Sync fields'));
}

function content_type_clone_sync_fields_form_submit($form, &$form_state) {
  $type = $form['#bundle'];
  $entity_type = $form['#entity'];
  $dest_values = $source_values = $form_state['values'];
  $field_names = $source_values['field_names'];

  $src_instances = field_read_instances(array('entity_type' => $entity_type, 'bundle' => $type->type, 'field_name' => $field_names));
  $result = array();
  foreach($src_instances as $instance) {
    $result[$instance['field_name']] = $instance;
  }

  $bundles = array();
  foreach($dest_values['bundles'] as $bundle => $state) {
    if($state) {
      $bundles[] = $bundle;
    }
  }

  content_type_clone_copy_instances(
    $result,
    $entity_type,
    $source_values['copy_variables'],
    !empty($source_values['group_settings']),
    $bundles
  );

  $form_state['redirect'] = 'admin/structure/types';
  return;
}

function _content_type_clone_create_instances($old_type, $type, $entity_type) {
  $old_instances = field_info_instances($entity_type, $old_type->type);
  $instances     = field_info_instances($entity_type, $type->type);

  foreach($old_instances as $name => $instance) {
    if(!isset($instances[$name])) {
      $instance['bundle'] = $type->type;
      field_create_instance($instance);
    }
  }
}

function _content_type_clone_get_groups_by_type($src_type) {
  $result = array();
  $content_type_groups = ContentTypeGroup::fetch(TRUE);
  foreach($content_type_groups as $group) {
    if(isset($group->content_types[$src_type])) {
      $result[] = $group;
    }
  }

  return $result;
}

function _content_type_clone_copy_settings($src_type, $dst_type) {
  if(module_exists('content_type_groups')) {
    $groups = _content_type_clone_get_groups_by_type($src_type);
    ContentTypeGroup::removeContentType($dst_type);
    foreach($groups as $group) {
      $group = new ContentTypeGroup($group->type);
      $group->addContentType($dst_type);
      $group->save();
    }
  }
}

function _content_type_clone_get_node_type_variables($entity_type) {
  $variables = &drupal_static(__FUNCTION__, array());

  if(!isset($variables[$entity_type])) {
    $form = $form_state = array();
    $form = node_type_form($form, $form_state, $entity_type);
    $form_id = 'node_type_form';
    $hooks = array('form', 'form_' . $form_id);
    //ugly hack, how to get all node type speciffic variables, provided by modules
    drupal_alter($hooks, $form, $form_state, $form_id);

    $filter_keys = _content_type_clone_get_filter_form_values();
    foreach($form as $key => $var) {
      if(substr($key, 0, 1) != '#' && !in_array($key, $filter_keys)) {
        $variables[$entity_type][] = $key;
      }
    }
  }

  return $variables[$entity_type];
}

function content_type_clone_copy_variables($entity_type, $src_bundle, $dst_bundle) {
  $variable_names = _content_type_clone_get_node_type_variables($entity_type);
  foreach ($variable_names as $key) {
    $variable_src = $key . '_' . $src_bundle;
    $variable_dst = $key . '_' . $dst_bundle;

    $value = variable_get($variable_src, null);
    if($value !== null) {
      variable_set($variable_dst, $value);
    }
  }
}

function content_type_clone_copy_instances($src_instances, $entity_type, $copy_variables, $group_settings, $bundles = null) {
  $field_names = array_keys($src_instances);
  $criteria = array('entity_type' => $entity_type, 'field_name' => $field_names);
  if($bundles) {
    $criteria['bundle'] = $bundles;
  }
  $all_instances = field_read_instances($criteria);

  foreach($all_instances as $instance) {
    $name = $instance['field_name'];
    $orig_bundle = $src_instances[$name]['bundle'];
    if(isset($src_instances[$name]) && $instance['bundle'] != $orig_bundle) {
      $bundle = $instance['bundle'];
      if($copy_variables) {
        content_type_clone_copy_variables($entity_type, $orig_bundle, $bundle);
      }
      if($group_settings) {
        _content_type_clone_copy_settings($orig_bundle, $bundle);
      }
      $instance = $src_instances[$name];
      $instance['bundle'] = $bundle;
      field_update_instance($instance);
    }
  }
}
